1. Student with Grade Validation

package day_5_assignment;
class Student {
    private String studentName;
    private int rollNumber;
    private final int marks;

    Student(String name, int roll, int marks) {
        this.studentName = name;
        this.rollNumber = roll;
        this.marks = (marks >= 0 && marks <= 100) ? marks : 0;
    }

    public String getStudentName() {
        return studentName;
    }

    public int getRollNumber() {
        return rollNumber;
    }

    public int getMarks() {
        return marks;
    }

    void displayDetails() {
        System.out.println("Name: " + studentName);
        System.out.println("Roll: " + rollNumber);
        System.out.println("Marks: " + marks);
    }
}

public class StudentDemo {
    public static void main(String[] args) {
        Student s = new Student("Rahul", 101, 85);
        s.displayDetails();
    }
}

Output:
Name: Rahul
Roll: 101
Marks: 85

2. Rectangle with Positive Dimensions

package day_5_assignment;
class Rectangle {
    private double width;
    private double height;

    Rectangle(double w, double h) {
        setWidth(w);
        setHeight(h);
    }

    public double getWidth() {
        return width;
    }

    public void setWidth(double w) {
        this.width = w > 0 ? w : 1;
    }

    public double getHeight() {
        return height;
    }

    public void setHeight(double h) {
        this.height = h > 0 ? h : 1;
    }

    double getArea() {
        return width * height;
    }

    double getPerimeter() {
        return 2 * (width + height);
    }

    void displayDetails() {
        System.out.println("Width: " + width);
        System.out.println("Height: " + height);
        System.out.println("Area: " + getArea());
        System.out.println("Perimeter: " + getPerimeter());
    }
}

public class RectangleDemo {
    public static void main(String[] args) {
        Rectangle r = new Rectangle(5, 3);
        r.displayDetails();
    }
}

Output:
Width: 5.0
Height: 3.0
Area: 15.0
Perimeter: 16.0

3. Bank Account with Transaction Logic

package day_5_assignment;
import java.util.ArrayList;

class BankAccount {
    private String accountNumber;
    private String accountHolder;
    private double balance;
    private ArrayList<String> transactions = new ArrayList<>();

    BankAccount(String num, String holder, double initial) {
        this.accountNumber = num;
        this.accountHolder = holder;
        this.balance = initial > 0 ? initial : 0;
        transactions.add("Initial deposit: " + balance);
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            transactions.add("Deposit: +" + amount);
        }
    }

    public boolean withdraw(double amount) {
        if (amount > 0 && balance >= amount) {
            balance -= amount;
            transactions.add("Withdrawal: -" + amount);
            return true;
        }
        return false;
    }

    public double getBalance() {
        return balance;
    }

    public String getLastTransaction() {
        return transactions.get(transactions.size() - 1);
    }

    public String toString() {
        return "Account: " + accountNumber.substring(0, 2) + "****" + 
               "\nHolder: " + accountHolder + 
               "\nBalance: " + balance;
    }
}

public class BankDemo {
    public static void main(String[] args) {
        BankAccount acc = new BankAccount("12345678", "Priya", 1000);
        acc.deposit(500);
        acc.withdraw(200);
        System.out.println(acc);
        System.out.println("Last Transaction: " + acc.getLastTransaction());
    }
}
Output:
Account: 12****
Holder: Priya
Balance: 1300.0
Last Transaction: Withdrawal: -200.0

4. Secure Locker with Inner Class

package day_5_assignment;
class Locker {
    private String lockerId;
    private boolean isLocked;
    private String passcode;
    private SecurityManager manager;

    Locker(String id, String code) {
        this.lockerId = id;
        this.passcode = code;
        this.manager = new SecurityManager();
        this.isLocked = true;
    }

    private class SecurityManager {
        boolean verify(String input) {
            return input.equals(passcode);
        }
    }

    public void lock() {
        isLocked = true;
    }

    public boolean unlock(String code) {
        if (manager.verify(code)) {
            isLocked = false;
            return true;
        }
        return false;
    }

    public boolean isLocked() {
        return isLocked;
    }
}

public class LockerDemo {
    public static void main(String[] args) {
        Locker locker = new Locker("L123", "secret");
        System.out.println("Locked: " + locker.isLocked());
        System.out.println("Unlock success: " + locker.unlock("wrong"));
        System.out.println("Unlock success: " + locker.unlock("secret"));
        System.out.println("Locked: " + locker.isLocked());
    }
}
Output:
Locked: true
Unlock success: false
Unlock success: true
Locked: false

5. Immutable Product with Builder Pattern

package day_5_assignment;
class Product {
    private final String productName;
    private final String productCode;
    private final double price;
    private final String category;

    private Product(Builder builder) {
        this.productName = builder.productName;
        this.productCode = builder.productCode;
        this.price = builder.price;
        this.category = builder.category;
    }

    public String getProductName() {
        return productName;
    }

    public String getProductCode() {
        return productCode;
    }

    public double getPrice() {
        return price;
    }

    public String getCategory() {
        return category;
    }

    static class Builder {
        private String productName;
        private String productCode;
        private double price;
        private String category = "General";

        Builder withName(String name) {
            this.productName = name;
            return this;
        }

        Builder withCode(String code) {
            this.productCode = code;
            return this;
        }

        Builder withPrice(double price) {
            this.price = price > 0 ? price : 0;
            return this;
        }

        Builder withCategory(String category) {
            this.category = category;
            return this;
        }

        Product build() {
            return new Product(this);
        }
    }
}

public class ProductDemo {
    public static void main(String[] args) {
        Product p = new Product.Builder()
            .withName("Laptop")
            .withCode("LP123")
            .withPrice(75000)
            .withCategory("Electronics")
            .build();

        System.out.println("Name: " + p.getProductName());
        System.out.println("Price: " + p.getPrice());
    }
}
Output:
Name: Laptop
Price: 75000.0

Interface

1. Reverse CharSequence

package day_5_assignment;
class BackwardSequence implements CharSequence {
    private String data;

    BackwardSequence(String s) {
        this.data = s;
    }

    public int length() {
        return data.length();
    }

    public char charAt(int index) {
        return data.charAt(data.length() - 1 - index);
    }

    public CharSequence subSequence(int start, int end) {
        return new BackwardSequence(data.substring(data.length() - end, data.length() - start));
    }

    public String toString() {
        return new StringBuilder(data).reverse().toString();
    }
}

public class CharSeqDemo {
    public static void main(String[] args) {
        BackwardSequence bs = new BackwardSequence("Hello");
        System.out.println(bs);
        System.out.println(bs.charAt(1));
        System.out.println(bs.subSequence(1, 4));
    }
}
Output:
olleH
l
lle

2. Movable Shapes

package day_5_assignment;
interface Movable {
    void moveUp();
    void moveDown();
    void moveLeft();
    void moveRight();
}

class MovablePoint implements Movable {
    int x;
    int y;
    int xSpeed;
    int ySpeed;

    MovablePoint(int x, int y, int xSpeed, int ySpeed) {
        this.x = x;
        this.y = y;
        this.xSpeed = xSpeed;
        this.ySpeed = ySpeed;
    }

    public void moveUp() {
        y -= ySpeed;
    }

    public void moveDown() {
        y += ySpeed;
    }

    public void moveLeft() {
        x -= xSpeed;
    }

    public void moveRight() {
        x += xSpeed;
    }

    public String toString() {
        return "Point at (" + x + ", " + y + ")";
    }
}

class MovableCircle implements Movable {
    private int radius;
    private MovablePoint center;

    MovableCircle(int radius, MovablePoint center) {
        this.radius = radius;
        this.center = center;
    }

    public void moveUp() {
        center.moveUp();
    }

    public void moveDown() {
        center.moveDown();
    }

    public void moveLeft() {
        center.moveLeft();
    }

    public void moveRight() {
        center.moveRight();
    }

    public String toString() {
        return "Circle with radius " + radius + " at " + center;
    }
}

public class MovableDemo {
    public static void main(String[] args) {
        MovablePoint p = new MovablePoint(0, 0, 1, 1);
        MovableCircle c = new MovableCircle(5, p);

        System.out.println(c);
        c.moveRight();
        c.moveUp();
        System.out.println(c);
    }
}
Output:
Circle with radius 5 at Point at (0, 0)
Circle with radius 5 at Point at (1, -1)

3. Printer Switch

package day_5_assignment;
interface Printer {
    void print(String document);
}

class LaserPrinter implements Printer {
    public void print(String document) {
        System.out.println("Laser printing: " + document);
    }
}

class InkjetPrinter implements Printer {
    public void print(String document) {
        System.out.println("Inkjet printing: " + document);
    }
}

public class PrinterDemo {
    public static void main(String[] args) {
        Printer p = new LaserPrinter();
        p.print("Test Page 1");
        
        p = new InkjetPrinter();
        p.print("Test Page 2");
    }
}
Output:
Laser printing: Test Page 1
Inkjet printing: Test Page 2

4. Extended Vehicle Interface

package day_5_assignment;
interface BaseVehicle {
    void start();
}

interface AdvancedVehicle extends BaseVehicle {
    void stop();
    boolean refuel(int amount);
}

class Car implements AdvancedVehicle {
    private int fuel;

    Car(int initialFuel) {
        this.fuel = initialFuel;
    }

    public void start() {
        System.out.println("Car started");
    }

    public void stop() {
        System.out.println("Car stopped");
    }

    public boolean refuel(int amount) {
        if (amount > 0) {
            fuel += amount;
            return true;
        }
        return false;
    }
}

public class VehicleDemo {
    public static void main(String[] args) {
        AdvancedVehicle v = new Car(10);
        v.start();
        v.refuel(20);
        v.stop();
    }
}
Output:
Car started
Car stopped

5. Time Server with Callback

package day_5_assignment;
import java.time.LocalDateTime;

class TimeServer {
    interface Client {
        void updateTime(LocalDateTime now);
    }

    private Client client;

    void registerClient(Client c) {
        this.client = c;
    }

    void notifyClients() {
        if (client != null) {
            client.updateTime(LocalDateTime.now());
        }
    }
}

class Clock implements TimeServer.Client {
    public void updateTime(LocalDateTime now) {
        System.out.println("Clock updated: " + now);
    }
}

class Logger implements TimeServer.Client {
    public void updateTime(LocalDateTime now) {
        System.out.println("Log entry at: " + now);
    }
}

public class TimeDemo {
    public static void main(String[] args) {
        TimeServer server = new TimeServer();
        server.registerClient(new Clock());
        server.notifyClients();
        
        server.registerClient(new Logger());
        server.notifyClients();
    }
}
Output:
Clock updated: 2023-05-15T10:30:45.123
Log entry at: 2023-05-15T10:30:45.123

6. Polygon Interface with Default Methods

package day_5_assignment;
interface Polygon {
    double getArea();
    
    default double getPerimeter(int... sides) {
        double sum = 0;
        for (int side : sides) {
            sum += side;
        }
        return sum;
    }
    
    static String shapeInfo() {
        return "A polygon is a 2D shape with straight sides";
    }
}

class Rectangle implements Polygon {
    private int length;
    private int width;
    
    Rectangle(int l, int w) {
        this.length = l;
        this.width = w;
    }
    
    public double getArea() {
        return length * width;
    }
}

public class PolygonDemo {
    public static void main(String[] args) {
        Rectangle r = new Rectangle(4, 5);
        System.out.println("Area: " + r.getArea());
        System.out.println("Perimeter: " + r.getPerimeter(4, 5, 4, 5));
        System.out.println(Polygon.shapeInfo());
    }
}
Output:
Area: 20.0
Perimeter: 18.0
A polygon is a 2D shape with straight sides

Lambda Expressions

1. Sum of Two Integers

package day_5_assignment;
interface SumCalculator {
    int calculate(int a, int b);
}

public class LambdaDemo {
    public static void main(String[] args) {
        SumCalculator adder = (x, y) -> x + y;
        System.out.println("Sum: " + adder.calculate(5, 3));
    }
}
Output:
Sum: 8

2. Check Empty String

package day_5_assignment;
import java.util.function.Predicate;

public class StringCheck {
    public static void main(String[] args) {
        Predicate<String> isEmpty = s -> s.isEmpty();
        System.out.println("Is empty: " + isEmpty.test(""));
        System.out.println("Is empty: " + isEmpty.test("Hello"));
    }
}
Output:
Is empty: true
Is empty: false

3. Filter Even Numbers

package day_5_assignment;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class NumberFilter {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);
        List<Integer> evens = numbers.stream()
                                   .filter(n -> n % 2 == 0)
                                   .collect(Collectors.toList());
        System.out.println("Even numbers: " + evens);
    }
}
Output:
Even numbers: [2, 4, 6]

4. String Conversion

package day_5_assignment;
import java.util.List;
import java.util.stream.Collectors;

public class StringConvert {
    public static void main(String[] args) {
        List<String> words = List.of("hello", "world", "java");
        List<String> upper = words.stream()
                                .map(s -> s.toUpperCase())
                                .collect(Collectors.toList());
        System.out.println("Uppercase: " + upper);
    }
}
Output:
Uppercase: [HELLO, WORLD, JAVA]

5. String Sorting

package day_5_assignment;
import java.util.Arrays;
import java.util.List;

public class StringSort {
    public static void main(String[] args) {
        List<String> words = Arrays.asList("banana", "apple", "pear", "orange");
        words.sort((s1, s2) -> s1.length() - s2.length());
        System.out.println("Sorted by length: " + words);
        
        words.sort(String::compareTo);
        System.out.println("Sorted alphabetically: " + words);
    }
}
Output:
Sorted by length: [pear, apple, banana, orange]
Sorted alphabetically: [apple, banana, orange, pear]

6. Array Aggregation

package day_5_assignment;
import java.util.Arrays;

public class ArrayStats {
    public static void main(String[] args) {
        double[] nums = {1.5, 2.3, 3.7, 4.1};
        
        double sum = Arrays.stream(nums).sum();
        double max = Arrays.stream(nums).max().orElse(0);
        double avg = Arrays.stream(nums).average().orElse(0);
        
        System.out.println("Sum: " + sum);
        System.out.println("Max: " + max);
        System.out.println("Avg: " + avg);
    }
}
Output:
Sum: 11.6
Max: 4.1
Avg: 2.9

7. Factorial Calculation

package day_5_assignment;
import java.util.function.UnaryOperator;

public class Factorial {
    public static void main(String[] args) {
        UnaryOperator<Integer> factorial = n -> {
            int result = 1;
            for (int i = 2; i <= n; i++) {
                result *= i;
            }
            return result;
        };
        
        System.out.println("Factorial of 5: " + factorial.apply(5));
    }
}
Output:
Factorial of 5: 120
